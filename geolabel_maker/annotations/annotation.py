# Encoding: UTF-8
# File: annotation.py
# Creation: Sunday February 7th 2021
# Supervisor: Daphn√© Lercier (dlercier)
# Author: Arthur Dujardin (arthurdjn)
# ------
# Copyright (c) 2021, Makina Corpus


# Basic imports
from abc import ABC, abstractmethod
from datetime import datetime
from copy import deepcopy
from geolabel_maker.utils import relative_path


# TODO: Add function to check if the arguments are in the correct format (list of dict)


class Annotation(ABC):

    def __init__(self, images=None, categories=None, annotations=None, info=None):
        self.images = images or []
        self.categories = categories or []
        self.annotations = annotations or []
        self.info = info or {
            "description": "Auto-generated by Geolabel-Maker",
            "date_created": datetime.now().strftime("%Y/%m/%d")
        }

    @classmethod
    @abstractmethod
    def open(cls, filename):
        raise NotImplementedError

    @classmethod
    @abstractmethod
    def build(cls, images=None, categories=None, labels=None, **kwargs):
        raise NotImplementedError

    def to_dict(self, root=None):
        root = root or "."
        images = deepcopy(self.images)
        categories = deepcopy(self.categories)
        annotations = deepcopy(self.annotations)
        
        for image in images:
            image["file_name"] = relative_path(image.get("file_name", None), root)
        for category in categories:
            category["file_name"] = relative_path(category.get("file_name", None), root)
        for annotation in annotations:
            annotation["image_name"] = relative_path(annotation.get("image_name", None), root)                    
                
        return {
            "info": self.info,
            "images": images,
            "categories": categories,
            "annotations": annotations
        }

    @abstractmethod
    def save(self, out_file, **kwargs):
        raise NotImplementedError

    def inner_repr(self):
        return f"images={len(self.images)}, categories={len(self.categories)}, annotations={len(self.annotations)}"

    def __repr__(self):
        return f"{self.__class__.__name__}({self.inner_repr()})"
