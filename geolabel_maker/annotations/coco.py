# Encoding: UTF-8
# File: coco.py
# Creation: Tuesday December 29th 2020
# Author: arthurdjn
# ------
# Copyright (c) 2020, Makina Corpus


# Basic imports
from pathlib import Path
from datetime import datetime
from PIL import Image
import numpy as np

# Geolabel Maker
from .annotation import Annotation


class COCO(Annotation):
    """Defines an annotation for `Common Object in Context`. 
    It follows the format used by Microsoft for ``COCO`` annotation.

    * :attr:`info` (dict, optional): Description of the annotation (metadata).

    * :attr:`images` (list): List of dictionaries containing metadata for the images in context.

    * :attr:`categories` (list): List of dictionaries containing the description of the categories used.

    * :attr:`annotations` (list): List of dictionaries containing the segmentation of an object associated to an image.

    """

    def __init__(self, images, categories, annotations, info=None):
        super().__init__()
        self.images = images
        self.categories = categories
        self.annotations = annotations
        self.info = info or {
            "description": "Auto-generated by Geolabel-Maker",
            "date_created": datetime.now().strftime("%Y/%m/%d")
        }

    @classmethod
    def from_dataset(cls, dataset, zoom, is_crowd=False):
        r"""Generate a ``COCO`` annotation from a ``Dataset``.

        .. note::
            The provided dataset must contains a set of georeferenced images and categories (vectorized geometries).
            See :class:``geolabel_maker.dataset.Dataset``for further details.

        Args:
            dataset (Dataset): The dataset containing the images and categories.
            zoom (int, optional): Zoom level used to generate the annotations.
            is_crowd (bool, optional): Defaults to ``False``.

        Returns:
            COCO
        """
        # Map the categories and their ids
        category2id = {category.name: i for i, category in enumerate(dataset.categories)}
        
        def get_annotations():
            # Retrieve the annotations (i.e. geometry / categories)
            annotations = []
            categories = dataset.extract_categories(zoom=zoom)
            annotation_id = 0
            for category in categories:
                category_id = category2id[category.name]
                for _, row in category.data.iterrows():
                    # Get row elements
                    polygon = row.geometry
                    image_id = row.image_id
                    image_name = row.image_name
                    # Get annotation elements
                    segmentation = np.array(polygon.exterior.coords).ravel().tolist()
                    x, y, max_x, max_y = polygon.bounds
                    width = max_x - x
                    height = max_y - y
                    bbox = (x, y, width, height)
                    area = polygon.area
                    # Make annotation format
                    annotations.append({
                        "segmentation": [segmentation],
                        "iscrowd": int(is_crowd),
                        "image_id": image_id,
                        "image_name": image_name,
                        "category_id": category_id,
                        "id": annotation_id,
                        "bbox": bbox,
                        "area": area,
                    })
                    annotation_id += 1
            return annotations

        def get_categories():
            # Create an empty categories' dictionary
            categories = []
            for category in dataset.categories:
                category_id = category2id[category.name]
                categories.append({
                    "id": category_id,
                    "name": category.name,
                    "supercategory": category.name
                })
            return categories

        def get_images():
            # Retrieve image paths / metadata
            dir_path = Path(dataset.dir_tiles_labels) / str(zoom)
            images = []
            for image_id, image_path in enumerate(dir_path.rglob("*.png")):
                # get image info
                img = Image.open(image_path)
                width, height = img.size
                filename = str(image_path.relative_to(dataset.root))
                # create image description
                images.append({
                    "id": image_id,
                    "width": width,
                    "height": height,
                    "file_name": filename
                })
            return images

        def get_info():
            return {
                "description": "Auto-generated by Geolabel-Maker",
                "date_created": datetime.now().strftime("%Y/%m/%d"),
                "root": dataset.root,
                "zoom": zoom,
            }

        # Create the annotation as a dict
        info = get_info()
        images = get_images()
        categories = get_categories()
        annotations = get_annotations()

        return COCO(images, categories, annotations, info)

    def to_dict(self):
        return {
            "info": self.info,
            "images": self.images,
            "categories": self.categories,
            "annotations": self.annotations
        }

    def inner_repr(self):
        return f"images={len(self.images)}, categories={len(self.categories)}, annotations={len(self.annotations)}"
